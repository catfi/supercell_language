/**
 * Zillians MMO
 * Copyright (C) 2007-2011 Zillians.com, Inc.
 * For more information see http://www.zillians.com
 *
 * Zillians MMO is the library and runtime for massive multiplayer online game
 * development in utility computing model, which runs as a service for every
 * developer to build their virtual world running on our GPU-assisted machines.
 *
 * This is a close source library intended to be used solely within Zillians.com
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ZILLIANS_LANGUAGE_STRINGTABLE_H_
#define ZILLIANS_LANGUAGE_STRINGTABLE_H_

#include "core/Prerequisite.h"
#include <string>
#include <map>

namespace zillians { namespace language { namespace logging {

/**
 * StringTable is responsible to:
 *
 * 1. Tables for warning and error string
 */
struct StringTable
{
	/*[[[cog

	class Repo:
		""" Helper class to create attributes on the fly """
		def __init__(self):
			self.repo = []

		def create(self, name):
			if hasattr(self, name):
				raise AttributeError, 'Attribute %s Already Exist' % name
			setattr(self, name, name)
			self.repo.append(getattr(self, name))
	#
	# This is the place you gonna extend
	#

	# Define constant string
	LOG_STRING = Repo()
	LOG_STRING.create('LOG_UNUSED_VARIABLE')
	LOG_STRING.create('LOG_UNDEFINED_VARIABLE')

	# Define category
	LOG_CATEGORY = Repo()
	LOG_CATEGORY.create('CATEGORY_SYMBOL')
	LOG_CATEGORY.create('CATEGORY_FUNCTION')
	LOG_CATEGORY.create('CATEGORY_OBJECT_TYPE')
	LOG_CATEGORY.create('CATEGORY_MISC')

	# Define log type
	LOG_TYPE = Repo()
	LOG_TYPE.create('LOG_TYPE_WARNING')
	LOG_TYPE.create('LOG_TYPE_ERROR')
	LOG_TYPE.create('LOG_TYPE_FATAL')

	# Define log string attributes
	attribute_table = {
		LOG_STRING.LOG_UNUSED_VARIABLE: (LOG_TYPE.LOG_TYPE_WARNING, LOG_CATEGORY.CATEGORY_SYMBOL, 0, LOG_STRING.LOG_UNUSED_VARIABLE),
		LOG_STRING.LOG_UNDEFINED_VARIABLE: (LOG_TYPE.LOG_TYPE_ERROR, LOG_CATEGORY.CATEGORY_SYMBOL, 0, LOG_STRING.LOG_UNDEFINED_VARIABLE),
		}

	# Define translation table
	translation_table = {
		LOG_STRING.LOG_UNUSED_VARIABLE: {
			'en_US': r'Undefined variable $ID is used',
			'zh_TW': r'$ID 未被使用'
			},
		LOG_STRING.LOG_UNDEFINED_VARIABLE: {
			'en_US': r'Undefined variable $ID in $FILE',
			'zh_TW': r'變數 $ID 在 $FILE 中未被定義'
			},
	 	}
	]]]*/
	//[[[end]]]

	enum log_id {
		/*[[[cog
		import cog

		# Generate all log id
		for i in range(len(LOG_STRING.repo)):
			cog.outl('\t %s,' % LOG_STRING.repo[i]);
		]]]*/
		//[[[end]]]
	};

	enum log_type {
		/*[[[cog

		# Generate all log type
		for i in range(len(LOG_TYPE.repo)):
			cog.outl('\t %s,' % LOG_TYPE.repo[i]);
		]]]*/
		//[[[end]]]
	};

	enum log_category {
		/*[[[cog

		# Generate all log type
		for i in range(len(LOG_CATEGORY.repo)):
			cog.outl('\t %s,' % LOG_CATEGORY.repo[i]);
		]]]*/
		//[[[end]]]
	};

	struct attribute_table_t {
		attribute_table_t(log_type type, log_category category, uint32 level, log_id id) :
			type(type), category(category), level(level), id(id) {}
		log_type type;
		log_category category;
		uint32 level;
		log_id id;
	};

	typedef std::map<std::string, std::wstring> locale_translate_map_t;

	// Each message id has its own attributes
	std::map<log_id, attribute_table_t> attribute_table;

	// Each log id has a translation map, which includes the locale and the specific string mapping
	std::map<log_id, locale_translate_map_t>  translation_table;


	StringTable()
	{
		/*[[[cog
		# Generate attribute tables
		for (id, attr) in attribute_table.iteritems():
			cog.outl('attribute_table[%s] = attribute_table_t(%s, %s, %d, %s);' % ( (id,) + attr) );

		# Generate string tables for different language
		for (id, trans) in translation_table.iteritems():
			for (locale, trans) in trans.iteritems():
				cog.outl(r'translation_table[%s]["%s"] = "%s";' % (id, locale, trans))
		]]]*/
		//[[[end]]]
	}


	// TODO: APIs
};

}}}

#endif /* ZILLIANS_LANGUAGE_STRINGTABLE_H_ */
