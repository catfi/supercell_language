whoops!

SEMANTIC CHECK CHECKLIST

TODO:

    1. keyword "this" may not be used as param

LEGEND:

    ?:  undecided-stage
    P:  parse-stage
    S0: verify-stage-0
    T:  transform-stage
    S1: verify-stage-1

ERRORS:

                                                Undecided   Parse   S0  Xform   S1  Future
                                                /////////////////////////////////////////////////////////////////////
    E1. NAME
        a. UNKNOWN
            I.  UNKNOWN_NAME                                            T
            II. INCOMPLETE_FUNC                                     S0*
        b. AMBIGUOUS
            I.  DUPE_NAME                                           S0*
            II. AMBIGUOUS_REF                                           T
    E2. TYPE
        a. CAST
            I.   EXPRESSION
                 i.   WRITE_RVALUE                                  S0*
                 ii.  INVALID_CONV                                      T
                 iii. NO_MATCHING_MEMBER_FUNC                           T -- (same as E2.c.III)
            II.  STATEMENT
                 - INVALID_CONV_BOOL                                    T
            III. DECLARATION
                 - (...)                                                T
        b. PRIMARY_EXPRESSION
            I.   MEMBER_OF_NONCLASS                                     T
            II.  NO_SUCH_MEMBER                                         T
            III. SUBSCRIPT_OF_NONARRAY                                  T
            IV.  UNEXPECTED_VARIADIC_ARG                            S0? -- need resolved symbol
            V.   UNEXPECTED_VARIADIC_TEMPLATE_ARG                   S0*
        c. FUNCTION
            I.   CALL_NONFUNC                                           T
            II.  MISMATCH_CALL_ARGNUM_TOO_MANY                          T
            III. MISMATCH_CALL_ARGNUM_TOO_FEW                           T
            IV.  MISMATCH_CALL_ARGTYPE                                  T
            V.   UNEXPECTED_RETURN_VALUE                                        S1* -- need to know func return type
            VI.  MISSING_RETURN_VALUE                                           S1* -- need to know func return type
    E3. MODIFIER
        a. STORAGE
            I.  CONST
                i.  MISSING_CONST_INIT                      P
                ii. WRITE_CONST                                                 S1*
            II. STATIC
                i.   MISSING_STATIC_INIT                            S0*
                ii.  INVALID_NONSTATIC_CALL                                     S1* -- need to know if func is static
                iii. INVALID_NONSTATIC_REF                                      S1* -- need to know if func is static
        b. VISIBILITY
            I.  INVALID_ACCESS_PRIVATE                                          S1*
            II. INVALID_ACCESS_PROTECTED                                        S1*
    E4. STATEMENT
        a. MISSING_BREAK_TARGET                                     S0*
        b. MISSING_CONTINUE_TARGET                                  S0*
    E5. DECLARATION
        a. MISSING_PARAM_INIT                                       S0*
        b. UNEXPECTED_VARIADIC_PARAM                                S0*
        c. UNEXPECTED_VARIADIC_TEMPLATE_PARAM                       S0*
        d. PACKAGE_NAME_COLLIDE_PARENT                              S0
    E6. LIMIT
        a. EXCEED_PARAM_LIMIT                                       S0*
        b. EXCEED_TEMPLATE_PARAM_LIMIT                              S0*
                                                /////////////////////////////////////////////////////////////////////

WARNINGS:

                                                Undecided   Parse   S0  Xform   S1  Future
                                                /////////////////////////////////////////////////////////////////////
    W1. MISSING_RETURN                                                          S1* -- need to know func return type
    W2. UNINIT_REF                                                              S1*
    W3. CONTROL_PATH
        b. CONTROL_REACHES_END                                                  S1*
        c. MISSING_CASE                                                         S1? -- segfault in resolve stage
        d. DEAD_CODE                                                S0*
        e. INFINITE_RECURSION                                                       FUTURE
    /*
    W4. UNUSED_VAR                                                                  FUTURE
    */
                                                /////////////////////////////////////////////////////////////////////

MESSAGES:

    ERRORS:

    E1.a.I:   UNKNOWN_NAME                       = $ID was not declared in this scope
    E1.a.II:  INCOMPLETE_FUNC                    = undefined reference to $ID
    E1.b.I:   DUPE_NAME                          = redefinition of $ID
    E1.b.II:  AMBIGUOUS_REF                      = <<< no c++ equivalence >>>
    E2.a.I:   WRITE_RVALUE                       = lvalue required as left operand of assignment
              INVALID_CONV                       = invalid conversion from $ID to $ID2
              NO_MATCHING_MEMBER_FUNC            = no matching function for call to $ID
    E2.a.II:  INVALID_CONV_BOOL                  = could not convert $ID to 'bool'
    E2.a.III: (...)                              = <<< no c++ equivalence >>>
    E2.b.I:   MEMBER_OF_NONCLASS                 = request for member $ID in $ID2, which is of non-class type $ID3
    E2.b.II:  NO_SUCH_MEMBER                     = $ID has no member named $ID2
    E2.b.III: SUBSCRIPT_OF_NONARRAY              = invalid types $ID[$ID2] for array subscript
    E2.b.IV:  UNEXPECTED_VARIADIC_ARG            = <<< no c++ equivalent >>>
    E2.b.V:   UNEXPECTED_VARIADIC_TEMPLATE_ARG   = <<< no c++ equivalent >>>
    E2.c.I:   CALL_NONFUNC                       = $ID cannot be used as a function
    E2.c.II:  MISMATCH_CALL_ARGNUM_TOO_MANY      = too many arguments to function $ID
    E2.c.III: MISMATCH_CALL_ARGNUM_TOO_FEW       = too few arguments to function $ID
    E2.c.III: MISMATCH_CALL_ARGTYPE              = cannot convert $ID to $ID2 for argument $INT to $ID3
    E2.c.IV:  UNEXPECTED_RETURN_VALUE            = return-statement with a value, in function returning 'void'
    E2.c.V:   MISSING_RETURN_VALUE               = return-statement with no value, in function returning $ID
    E3.a.I:   MISSING_CONST_INIT                 = uninitialized const $ID
              WRITE_CONST                        = assignment of read-only variable $ID
    E3.a.II:  MISSING_STATIC_INIT                = <<< no c++ equivalence >>>
              INVALID_NONSTATIC_CALL             = cannot call member function $ID without object
              INVALID_NONSTATIC_REF              = invalid use of member $ID in static member function
    E3.b.I:   INVALID_ACCESS_PRIVATE             = $ID is private
    E3.b.II:  INVALID_ACCESS_PROTECTED           = $ID is protected
    E4.a:     MISSING_BREAK_TARGET               = break statement not within loop or switch
    E4.b:     MISSING_CONTINUE_TARGET            = continue statement not within a loop
    E5.a:     MISSING_PARAM_INIT                 = default argument missing for parameter $INT of $ID
    E5.b:     UNEXPECTED_VARIADIC_PARAM          = <<< syntax-error in gcc >>>
    E5.c:     UNEXPECTED_VARIADIC_TEMPLATE_PARAM = <<< syntax-error in gcc >>>
    E5.d:     PACKAGE_NAME_COLLIDE_PARENT        = $ID has the same name as the package in which it is declared
    E6.a:     EXCEED_PARAM_LIMIT                 = <<< no c++ equivalent >>>
    E6.b:     EXCEED_TEMPLATE_PARAM_LIMIT        = <<< no c++ equivalent >>>

    WARNINGS:

    W1:   MISSING_RETURN      = no return statement in function returning non-void
    W2:   UNINIT_REF          = $ID is used uninitialized in this function
    W3.a: CONTROL_REACHES_END = control reaches end of non-void function
    W3.b: MISSING_CASE        = enumeration value $ID not handled in switch
    W3.c: DEAD_CODE           = <<< no c++ equivalence >>>
    W3.d: INFINITE_RECURSION  = <<< no c++ equivalence >>>
    /*
    W4:   UNUSED_VAR          = unused variable $ID
    */

    HINTS:
          PREV_DECL_HERE = $ID previously declared here
          CANDIDATES_ARE = note: candidates are: $ID
          IN_FUNCTION    = In [static] [member] function $ID:
          FROM_HERE      = from this location
          IN_CONTEXT     = within this context

/////////////////////////////////////////////////////////////////////
/// BASIC
/////////////////////////////////////////////////////////////////////

// templated identifier
    - No parameter name conflict is allowed
    - The "..." type is only allowed once at the end of template parameter list
    - The "..." type is not allowed when the AST is processed and transformed. It should be expanded.
    - There should be a limit on the many templated parameters allowed in a single templated identifier

// annotations
    - If there's no custom annotation..

/////////////////////////////////////////////////////////////////////
/// EXPRESSION
/////////////////////////////////////////////////////////////////////

// unary expression
    - Check whether the type can be applied with specific unary operation (for example, ~ or ! cannot be used with floating number)

// binary expression 
    - Check the type compatibility between LHS and RHS
    - All expression must be fully resolved

// ternary expression
    - Check the type compatibility between LHS and RHS

// call expression
    - Check whether the node is callable
    - If the callee is a MemberExpr and the RHS is resolved to a non-static member function, we need to check if the LHS is a variable of that instance

// cast expression
    - Check whether the node is convertible to the desired type

/////////////////////////////////////////////////////////////////////
/// STATEMENT
/////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////
    /// SELECTION STATEMENT
    /////////////////////////////////////////////////////////////////////

    // if/elseif/else statement
        - The both if and elseif Selection must have non-null condition
        - The condition expression must be able to cast into a boolean variable (and insert cast operation when necessary)

    // switch statement
        - If the condition is a variable resolved to EnumDecl type, all cases must be covered or there's default case, otherwise generate a warning for it

    /////////////////////////////////////////////////////////////////////
    /// ITERATION STATEMENT
    /////////////////////////////////////////////////////////////////////

    // while/dowhile statement
        - If the condition can be evaluated as constant expression and its value is always true and there's no break in the while/do-while block, generate infinite loop warning

    // foreach statement
        - The range expression must be an instance of Range<T> type
        - The iterator must be a variable declaration or a primary expression resolved to a symbol

/////////////////////////////////////////////////////////////////////
/// DECLARATION
/////////////////////////////////////////////////////////////////////

// global variable declaration
    - The initializer must be constant expression (or can be deduced as constant expression)

// local variable declaration
    - The constant variable cannot be modified once it's set in the initializer

// function declaration
    - If the function has non-void return type, check if all paths have return value (and are of the same type)
    - If the function has void return type, then there's no return value allowed in the tree

// class declaration
    - The class name cannot conflict with other class (name resolving conflict)
    - The identifiers for interface implementation must refer to an interface
    - There can be more than one new function (constructor overload) as long as they have different parameter signature
    - There should be a limit on how many member variables allowed in a single class

// class member variable declaration
    - The variable name must not conflict with the class name or member function name
    - The variable names must not conflict with each other

// typedef declaration
    - The "from" node must refer to a type, and the "to" node must be an simple identifier

// enum declaration
    - The identifiers must not conflict with each other
    - The initialization list must be constant (just like global variable) and of integral type

// interface declaration
    - All methods in interface should not have "private" member scope specifier
    - All methods in interface should have no function body
    - All types must be explicitly specified for member function in interface

// class/interface member function declaration
    - The function parameters must be fully resolved
    - Except member function in interface, function must have body block (local anonymous function must be renamed beforehand)
    - The function name cannot conflict with other function unless they have different parameter signature (name resolving conflict)
    - There should be a limit on the many parameters allowed in a single function

/////////////////////////////////////////////////////////////////////
/// MODULE
/////////////////////////////////////////////////////////////////////

// package
    - The package name should not conflict with its parent and sibling
